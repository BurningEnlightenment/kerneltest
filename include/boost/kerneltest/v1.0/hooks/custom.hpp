/* Custom test kernel hooks
(C) 2016 Niall Douglas http://www.nedprod.com/
File Created: Aug 2016


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../config.hpp"

#ifndef BOOST_KERNELTEST_HOOKS_CUSTOM_HPP
#define BOOST_KERNELTEST_HOOKS_CUSTOM_HPP

BOOST_KERNELTEST_V1_NAMESPACE_BEGIN

namespace hooks
{
  namespace custom_impl
  {
    template <class U, class V> struct impl
    {
      U onfinish;
      V par;
      impl(impl &&) noexcept = default;
      impl(const impl &) = delete;
      ~impl() { onfinish(par); }
    };
    template <class U> struct impl<U, void>
    {
      U onfinish;
      impl(impl &&) noexcept = default;
      impl(const impl &) = delete;
      ~impl() { onfinish(); }
    };
    template <class state_type> struct make_impl
    {
      template <class U, class V, class Parent, class RetType, class... Args> auto operator()(U &&onbegin, V &&onfinish, Parent *parent, RetType &testret, size_t idx, Args &&... args) const { return impl<V, state_type>{std::forward<V>(onfinish), onbegin(parent, testret, idx, std::forward<Args>(args)...)}; }
    };
    template <> struct make_impl<void>
    {
      template <class U, class V, class Parent, class RetType, class... Args> auto operator()(U &&onbegin, V &&onfinish, Parent *parent, RetType &testret, size_t idx, Args &&... args) const
      {
        onbegin(parent, testret, idx, std::forward<Args>(args)...);
        return impl<V, void>{std::forward<V>(onfinish)};
      }
    };
    // Instantiated during permuter construction
    template <class U, class V> struct inst
    {
      U onbegin;
      V onfinish;
      std::string description;

      // Called at the beginning of an individual test. Returns object destroyed at the end of an individual test.
      template <class Parent, class RetType, class... Args> auto operator()(Parent *parent, RetType &testret, size_t idx, Args &&... args) const
      {
        using return_type = decltype(onbegin(parent, testret, idx, std::forward<Args>(args)...));
        return make_impl<return_type>()(onbegin, std::move(onfinish), parent, testret, idx, std::forward<Args>(args)...);
      }
      template <class... Args> std::string print(Args &&...) const { return description; }
    };
  }
  //! The parameters for the custom hook
  template <class... Args> using custom_parameters = parameters<Args...>;
  /*! Kernel test hook invoking a lambda before a test and another lambda after a test.
  The first lambda is called with the spec `(parameter_permuter<...> *parent, outcome<T> &testret, size_t, custom_parameters ...)`.
  If the first lambda returns anything, it is passed as the first parameter to the second lambda.
  */
  template <class U, class V> inline auto custom(U &&onbegin, V &&onfinish, std::string description) { return custom_impl::inst<U, V>{std::forward<U>(onbegin), std::forward<V>(onfinish), std::move(description)}; }
}

BOOST_KERNELTEST_V1_NAMESPACE_END

#endif
